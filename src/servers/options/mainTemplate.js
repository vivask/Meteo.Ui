import { RestartContainer, StartContainer, StopContainer, GetLogging, ClearLogging } from '../api/mainApi';
import { computed } from 'vue';

export function createServices(state) {
  return computed(() => [
    {
      title: 'Cluster',
      value: 'cluster',
      disable: !state.value.ClusterService,
      empty: state.value.ClusterLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Proxy',
      value: 'proxy',
      disable: !state.value.ProxyService,
      empty: state.value.ProxyLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Web',
      value: 'web',
      disable: !state.value.WebService,
      empty: state.value.WebLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Esp32',
      value: 'esp32',
      disable: !state.value.Esp32Service,
      empty: state.value.Esp32Log,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Sshclient',
      value: 'sshclient',
      disable: !state.value.SshclientService,
      empty: state.value.SshclientLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Schedule',
      value: 'schedule',
      disable: !state.value.ScheduleService,
      empty: state.value.ScheduleLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Messanger',
      value: 'messanger',
      disable: !state.value.MessangerService,
      empty: state.value.MessangerLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Radius',
      value: 'radius',
      disable: !state.value.RadiusService,
      empty: state.value.RadiusLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Media',
      value: 'media',
      disable: !state.value.MediaService,
      empty: state.value.MediaLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Nut',
      value: 'nut',
      disable: !state.value.NutService,
      empty: state.value.NutLog,
      logging: GetLogging,
      clear: ClearLogging,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Gogs',
      value: 'gogs',
      disable: !state.value.GogsService,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
    {
      title: 'Postgres',
      value: 'postgres',
      disable: !state.value.PostgresService,
      restart: RestartContainer,
      start: StartContainer,
      stop: StopContainer,
    },
  ]);
}

export default {};
